plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.10.3'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id "org.sonarqube" version "2.8"
    id 'jacoco'
    id 'java'
    id 'maven-publish'
}

sonarqube {
    properties {
        property "sonar.projectKey", "kdebisschop_rundeck-nexus3-optionvalue-plugin"
        property "sonar.organization", "kdebisschop"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    reports {
        xml.required
        csv.required
        html.destination file("${buildDir}/jacocoHtml")
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

defaultTasks 'clean','build'

group = 'com.github.kdebisschop'

ext.rundeckPluginVersion = '1.2'
ext.pluginClassNames='com.bioraft.rundeck.nexus.Nexus3OptionProvider'
ext.pluginName = 'Nexus3 Option Values Provider'
ext.pluginDescription = 'Fetches and filters assets from a Nexus3 repository'

scmVersion {
    ignoreUncommittedChanges = true
    tag {
        // Ignore tags that begin with <prefix><versionSeparator>, include all tags
        // if prefix is empty.
        prefix = ''
        versionSeparator = ''

        // Append .0 to satisfy SemVer if the tag version is only X.Y
        def origDeserialize = deserialize
        deserialize = { config, position, tagName ->
            String orig = origDeserialize(config, position, tagName)
            if (orig.split('\\.').length < 3) {
                orig += ".0"
            }
            orig
        }
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

configurations{
    // Declare custom pluginLibs configuration to include only libs for this plugin
    pluginLibs

    // Declare compile to extend from pluginLibs so it inherits the dependencies
    compile{
        extendsFrom pluginLibs
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}

dependencies {
    implementation 'org.rundeck:rundeck-core:5.4.0-20240618'
    implementation 'org.apache.maven:maven-artifact:3.9.8'

    testImplementation group: 'junit', name: 'junit', version: '4.13.1'

    testImplementation (
        'org.mockito:mockito-all:1.10.19',
        'org.powermock:powermock-module-junit4:2.0.9',
        'org.powermock:powermock-api-mockito:1.7.4'
    )
}

// Task to copy plugin libs to output/lib dir
tasks.register('copyToLib', Copy) {
    into "$buildDir/output/lib"
    from configurations.pluginLibs
}

jar {
    from "$buildDir/output"
    manifest {
        def libList = configurations.pluginLibs.collect{'lib/'+it.name}.join(' ')

        attributes 'Rundeck-Plugin-Classnames': pluginClassNames
        attributes 'Rundeck-Plugin-File-Version': archiveVersion
        attributes 'Rundeck-Plugin-Name': pluginName
        attributes 'Rundeck-Plugin-Description': pluginDescription
        attributes 'Rundeck-Plugin-Rundeck-Compatibility-Version': '3.x'
        attributes 'Rundeck-Plugin-Tags': 'java,WorkflowNodeStep'
        attributes 'Rundeck-Plugin-License': 'Apache 2.0'
        attributes 'Rundeck-Plugin-Source-Link': 'https://bitbucket.org/raftdev/raft-tools-rundeck-plugin'
        attributes 'Rundeck-Plugin-Target-Host-Compatibility': 'all'
        attributes 'Rundeck-Plugin-Version': rundeckPluginVersion
        attributes 'Rundeck-Plugin-Archive': 'true'
        attributes 'Rundeck-Plugin-Libs': "${libList}"

    }
    dependsOn(copyToLib)
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
    from javadoc.destinationDir
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/kdebisschop/rundeck-nexus3-optionvalue-plugin")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

wrapper {
    gradleVersion = '6.2'
}
